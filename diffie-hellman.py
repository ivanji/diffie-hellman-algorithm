# Python representation of Diffie-Hellman Key Exchange (D-H) method.
# The implementation requires large primes. (At least 1024-bit), here I'm symplifying it to make it easier to understand the login
# (Simplified using small prime numbers).
#
# RFC sets specific Security considerations for the resulting key
# Resulting Modulus must be at least 2048-bit in size.
# https://tools.ietf.org/html/rfc3526

# Step 1: Two prime numbers are generated and shared with the other party
sharedBase = 47 # g
sharedPrime = 199 # p // Same of 2048 bit size: 13755790477607971451

print "g is equal to %s & p is equal to %s" % (sharedBase, sharedPrime) 

print "--------------------------"
# Step 2: A Secret is generated by each of the parties

aliceSecret = 6 # a
bobSecret = 2 # b

print "--------------------------"
# Step 3: The following Trapdoor function is performed by both parties using the available details. Results from each is exchanged by the parties.

print "Alice performs the following operation: g^a mod p and sends result (A) to Bob"
                          
A = (sharedBase**aliceSecret) % sharedPrime
print "--------------------------"

print "Bob performs same operation and sends result (B) to Alice"

B = (sharedBase**bobSecret) % sharedPrime

print "--------------------------"
# Step 4: Same Trapdoor function is performed by both parties. The resulting number will be the same and this will become their private key
print "Alice now performs same operation using calculated result (B) from Bob"

aliceModulo = (B**aliceSecret) % sharedPrime

print "--------------------------"

print "Bob now performs same operation using calculated result (A) from Alice"

bobModulo = (A**bobSecret) % sharedPrime

print bobModulo
print aliceModulo
print "--------------------------"

print "Shared Key is equal to %s." % bobModulo
print "Now try this with large prime numbers!"